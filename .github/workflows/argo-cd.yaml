name: Build and Deploy with ArgoCD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'dev'

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ashwini73/todolist-app
  MANIFEST_REPO: ashwinimhasrup/argocd-TodoList

jobs:
  # DEV Environment - Feature/Hotfix branches
  deploy-dev:
    runs-on: ubuntu-latest
    if: |
      startsWith(github.ref, 'refs/heads/hotfix/') || 
      startsWith(github.ref, 'refs/heads/feature/') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git pull origin main --rebase

      - name: Update image tag in dev manifest
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq eval '.spec.template.spec.containers[0].image = "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"' -i k8s/dev/dev.yaml

      - name: Commit and push changes
        run: |
          git add k8s/dev/dev.yaml
          git diff --staged --quiet || git commit -m "chore(dev): update image to ${{ steps.set-tag.outputs.tag }}"
          git push origin main

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployed to DEV Environment"
          echo "ðŸ“¦ Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          echo "ðŸ”„ ArgoCD will auto-sync to namespace: argo-dev"

  # QA Environment - Develop branch
  deploy-qa:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: qa
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=qa-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:qa-latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git pull origin main --rebase

      - name: Update image tag in qa manifest
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq eval '.spec.template.spec.containers[0].image = "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"' -i k8s/qa/qa.yaml

      - name: Commit and push changes
        run: |
          git add k8s/qa/qa.yaml
          git diff --staged --quiet || git commit -m "chore(qa): update image to ${{ steps.set-tag.outputs.tag }}"
          git push origin main

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployed to QA Environment"
          echo "ðŸ“¦ Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          echo "ðŸ”„ ArgoCD will auto-sync to namespace: argo-qa"

  # STAGING Environment - Release branches
  deploy-staging:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    environment: staging
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=staging-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git pull origin main --rebase

      - name: Update image tag in staging manifest
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq eval '.spec.template.spec.containers[0].image = "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"' -i k8s/staging/staging.yaml

      - name: Commit and push changes
        run: |
          git add k8s/staging/staging.yaml
          git diff --staged --quiet || git commit -m "chore(staging): update image to ${{ steps.set-tag.outputs.tag }}"
          git push origin main

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployed to STAGING Environment"
          echo "ðŸ“¦ Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          echo "ðŸ”„ ArgoCD will auto-sync to namespace: argo-staging"

  # PRODUCTION Environment - Tags
  deploy-prod:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=${TAG_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git pull origin main --rebase

      - name: Update image tag in prod manifest
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq eval '.spec.template.spec.containers[0].image = "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"' -i k8s/prod/prod.yaml

      - name: Commit and push changes
        run: |
          git add k8s/prod/prod.yaml
          git diff --staged --quiet || git commit -m "chore(prod): update image to ${{ steps.set-tag.outputs.tag }}"
          git push origin main

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployed to PRODUCTION Environment"
          echo "ðŸ“¦ Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}"
          echo "ðŸ”„ ArgoCD will auto-sync to namespace: argo-prod"
