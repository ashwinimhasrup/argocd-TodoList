name: Build and Deploy with ArgoCD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
    tags:
      - 'v*'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment manually'
        required: true
        default: 'dev'

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ashwini73/todolist-app
  MANIFEST_REPO: ashwinimhasrup/argocd-TodoList

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout manifests repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPO }}
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Determine environment
        id: env-select
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/feature/* || "${GITHUB_REF}" == refs/heads/hotfix/* ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            echo "env=qa" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/release/* ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Update image tag in manifest
        run: |
          ENVIRONMENT=${{ steps.env-select.outputs.env }}
          IMAGE="${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
          
          echo "ðŸ§© Updating environment: $ENVIRONMENT"
          echo "ðŸ“¦ Image: $IMAGE"
          
          yq eval ".spec.template.spec.containers[0].image = \"$IMAGE\"" -i k8s/${ENVIRONMENT}/${ENVIRONMENT}.yaml

      - name: Commit and push changes
        run: |
          ENVIRONMENT=${{ steps.env-select.outputs.env }}
          git add k8s/${ENVIRONMENT}/${ENVIRONMENT}.yaml
          git diff --staged --quiet || git commit -m "chore(${ENVIRONMENT}): update image to ${{ needs.build-and-push.outputs.image-tag }}"
          git push origin main

      - name: ArgoCD Auto-Sync Notification
        run: |
          echo "âœ… Manifests updated successfully for environment: ${{ steps.env-select.outputs.env }}"
          echo "ðŸ”„ ArgoCD will automatically sync changes for namespace: argo-${{ steps.env-select.outputs.env }}"
          echo "ðŸ“¦ New image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
